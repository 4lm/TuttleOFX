Import( 'project', 'libs' )

import os.path

commonLibs = [
	libs.openfxHack,
	libs.boost,
	libs.dl,
]
if project.env['mode'] != 'production':
	commonLibs.append( libs.system_debug_info )

project.StaticLibrary(
		'tuttleCommon',
		dirs      = ['src/tuttle/common'],
		includes  = ['src'],
		libraries = commonLibs,
		shared = True
	)

project.StaticLibrary(
		'tuttlePlugin',
		dirs      = ['src/tuttle/plugin'],
		includes  = ['src','src/tuttle/host/core'],
		libraries = [
				libs.tuttleCommon,
				libs.sequenceParser,
				libs.openfxPluginSupportHack,
				libs.terry,
				libs.gl,
			],
		shared = True
	)

tuttleHostLibs = [
		libs.tuttleCommon,
		libs.openfxHack,
		libs.dl,
		libs.boost_filesystem,
		libs.boost_serialization,
		libs.boost_thread,
		libs.boost_atomic,
		libs.boost_gil,
		libs.boost_program_options,
	]
tuttleHostFlags = {}

if project.TUTTLE_HOST_WITH_PYTHON_EXPRESSION:
	tuttleHostLibs.append( libs.boost_python )
	tuttleHostFlags['CPPDEFINES'] = ['TUTTLE_HOST_WITH_PYTHON_EXPRESSION']

if project.env['mode'] != 'production':
	tuttleHostLibs += [libs.png]

project.StaticLibrary(
		'tuttleHost',
		dirs      = ['src/tuttle/host'],
		includes  = ['src'],
		libraries = tuttleHostLibs,
		globalEnvFlags = tuttleHostFlags,
		shared = True
	)

# "tuttleTest" is not a build target, but centralize denpendencies needed
# for all tuttle unittest.
project.ObjectLibrary(
		'tuttleTest',
		includes  = ['src'],
		libraries = [
			libs.tuttleHost,
			libs.boost_unit_test_framework,
			]
	)


# <<<<<<< HEAD
# pythonOutputDir = project.inOutputDir('python/pyTuttle')
# 
# pyTuttleEnv = project.createEnv( [
# 	libs.python,
# 	libs.pthread,
# 	libs.tuttleHost,
# 	libs.numpy,
# 	], name='pyTuttle' )
# 
# pyTuttleEnv.AppendUnique( SWIGFLAGS = ['-python','-c++','-Wall'] ) # ,'-shadow','-docstring'] )
# pyTuttleEnv.AppendUnique( SWIGPATH = pyTuttleEnv['CPPPATH'] )
# pyTuttleEnv.AppendUnique( SWIGOUTDIR = pythonOutputDir )
# pyTuttleEnv.Replace( SHLIBPREFIX = '' )
# if project.macos:
# 	pyTuttleEnv.Replace( SHLIBSUFFIX = '.so' ) # .dyLib not recognized
# 
# pyTuttle = project.SharedLibrary(
# 		target = '_tuttle',
# =======
# project.pySwigBinding(
# 		packageName = "pyTuttle",
# 		moduleName = "tuttle",
# >>>>>>> 8e9ad0b0737d025f19f32034b82d8d7d9e22208b
# 		sources = ['src/tuttle/host/tuttle.i'],
# 		libraries = [libs.tuttleHost],
# 	)
# 
project.pySwigBinding(
	packageName = "pyTuttle",
	moduleName = "tuttle",
	sources = ['src/tuttle/host/tuttle.i'],
	libraries = [libs.tuttleHost, libs.numpy],
        )
