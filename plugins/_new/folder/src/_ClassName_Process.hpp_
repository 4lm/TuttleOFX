#ifndef _TUTTLE_PLUGIN_%D_CLASSNAME%_PROCESS_HPP_
#define _TUTTLE_PLUGIN_%D_CLASSNAME%_PROCESS_HPP_

#include <tuttle/common/image/gilGlobals.hpp>
#include <tuttle/plugin/ImageGilProcessor.hpp>
#include <tuttle/plugin/PluginException.hpp>

#include <ofxsImageEffect.h>
#include <ofxsMultiThread.h>

#include <boost/scoped_ptr.hpp>

#include <cstdlib>
#include <cassert>
#include <cmath>
#include <vector>
#include <iostream>



namespace tuttle {
namespace plugin {
namespace %NAMESPACE% {

/**
 * @brief %CLASSNAME%
 *
 */
template<class View>
class %CLASSNAME%Process : public ImageGilProcessor<View>
{
protected :
    %CLASSNAME%Plugin&    _plugin;        ///< Rendering plugin
    View                  _srcView;       ///< Source view

public:
    %CLASSNAME%Process( %CLASSNAME%Plugin& instance );

    // set up and run a processor
    void setup( const OFX::RenderArguments& args );

    // Do some processing
    void multiThreadProcessImages( const OfxRectI& procWindow );
};

}
}
}

#include "%CLASSNAME%Process.tcc"

#endif
