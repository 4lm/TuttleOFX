
namespace tuttle {
namespace plugin {
namespace %NAMESPACE% {

template<class View>
%CLASSNAME%Process<View>::%CLASSNAME%Process( %CLASSNAME%Plugin &instance )
: ImageGilFilterProcessor<View>( instance )
, _plugin( instance )
{
}

/**
 * @brief Function called by rendering thread each time a process must be done.
 *
 * @param[in] procWindow  Processing window
 */
template<class View>
void %CLASSNAME%Process<View>::multiThreadProcessImages( const OfxRectI& procWindow )
{
	using namespace boost::gil;
	
	for( int y = procWindow.y1;
			 y < procWindow.y2;
			 ++y )
	{
		typename View::x_iterator src_it = this->_srcView.x_at( procWindow.x1, y );
		typename View::x_iterator dst_it = this->_dstView.x_at( procWindow.x1, y );
		for( int x = procWindow.x1;
			 x < procWindow.x2;
			 ++x, ++src_it, ++dst_it )
		{
			(*dst_it) = (*src_it);
		}
		if( this->progressForward() )
			return;
	}
	/*
	View src = subimage_view( this->_srcView, procWindow.x1, procWindow.y1,
							  procWindow.x2 - procWindow.x1,
							  procWindow.y2 - procWindow.y1 );
	View dst = subimage_view( this->_dstView, procWindow.x1, procWindow.y1,
							  procWindow.x2 - procWindow.x1,
							  procWindow.y2 - procWindow.y1 );
	copy_pixels( src, dst );
	*/

}

}
}
}
