##############################################################################
##                          TuttleOFX Project                                #
##                                                                           #
##                                                                           #
##                                                                           #
## Build:                                                                    #
##                                                                           #
## call bjam.sh with:                                                        #
##      /tuttle         build tuttle library                                 #
##      /sam-tools      build sam commands line tool                         #
##                          - sam-ls                                         #
##                          - sam-cp                                         #
##                          - sam-mv                                         #
##                          - sam-rm                                         #
##                          - sam-do                                         #
##                          - sam-check                                      #
##                          - sam-plugins                                    #
##                          - sam-install ( to install in dist directory )   #
##                                                                           #
##      or your can build a specific tools with:                             #
##      /sam-tools//sam-toolname (example: /sam-tools//sam-do )              #
##      ( warning: it not run the sam-install command. )                     #
##                                                                           #
##      /qsam           build a little GUI in Qt4                            #
##      /plugins                                                             #
##                                                                           #
##      /tuttletests                                                         #
##      /samtests                                                            #
##                                                                           #
##      /pyTuttle                                                            #
##      /tests                                                               #
##                                                                           #
##                                                                           #
##      to build static plugins and or application, add:                     #
##      ./bjam.sh link=static [target]                                       #
##                                                                           #
##      default build is in debug, to build in release type:                 #
##      ./bjam.sh variant=release [target]                                   #
##                                                                           #
##############################################################################

import os ;
import path ;
import feature ;

# versions of gcc with specific template-depth
gcc-no-overflow = 4.5.0   4.5.1   4.5.2   4.5.3   4.6.0   4.6.1   4.6.2 ;

local rule check-required-env ( var ) {
	if ! $($(var)) {
		EXIT Missing variable $(var) ;
	}
}

##############################################################################
# Python
##############################################################################

# see the user-config.jam file

##############################################################################
# Image Magick
##############################################################################

constant	MAGICK_INCLUDE  : /usr/include/ImageMagick ;

# can be found with command: MagickCore-config --libs
constant	MAGICK_LIBS     : " -L/usr/lib64 -L/usr/lib64 -lMagickCore -llcms -ltiff -lfreetype -ljpeg -lfontconfig -lXext -lSM -lICE -lX11 -lXt -lbz2 -lz -lm -lgomp -lpthread" ;


##############################################################################
# OpenGL
##############################################################################

if [ os.name ] = NT
    {   lib opengl32 ;  alias opengl : opengl32 ; }
else if [ os.name ] = LINUX
    {   alias opengl : ; }
else if [ os.name ] = MACOSX
    {   alias opengl : : : : <linkflags>"-framework OpenGL" ; }


##############################################################################
# Environment variables
##############################################################################

local HOSTNAME ;

if [ os.name ] = NT
    {   HOSTNAME = "windows" ; }
else if [ os.name ] = LINUX
    {   HOSTNAME = "linux" ; }
else if [ os.name ] = MACOSX
    {   HOSTNAME = "macos" ; }

#print socket.gethostname()

local               BOOST_ROOT  = [ modules.peek : BOOST_ROOT ] ;
check-required-env  BOOST_ROOT ;

path-constant   3RD_PARTY       : 3rdParty ;
path-constant   LIBRARIES       : libraries ;
path-constant   BOOST_LIBS      : $(BOOST_ROOT) ;
path-constant   BOOST_HACK      : $(LIBRARIES)/boostHack ;
path-constant   TERRY           : $(LIBRARIES)/terry ;
path-constant   SEQUENCE_PARSER : $(LIBRARIES)/sequenceParser ;

path-constant   DIST            : ./dist/$(HOSTNAME) ;
path-constant   DIST_RELEASE    : $(DIST)/release ;
path-constant   DIST_DEBUG      : $(DIST)/debug ;
path-constant   DIST_PRODUCTION : $(DIST)/production ;
path-constant   BUILD           : ./.build ;

##############################################################################
# Global project requirements
##############################################################################
project
    :
    requirements
	# multithreading on
	<threading>multi

	<define>BOOST_ALL_NO_LIB

	#<variant>release:<warnings-as-errors>on
	<variant>release:<define>TUTTLE_PRODUCTION
	#<variant>release:<define>TUTTLE_NO_COUT
	<variant>release:<toolset>gcc,<optimization>speed:<define>USE_INLINE_ASSEMBLER
	# or
	#<variant>release:<toolset>gcc,<optimization>full

	<define>BOOST_REGEX_NO_EXTERNAL_TEMPLATES

	<os>LINUX:<variant>debug:<linkflags>-Wl,--no-undefined
	<os>LINUX:<variant>release:<linkflags>-fvisibility=hidden
	<os>LINUX:<cxxflags>-fPIC
	<os>LINUX:<cflags>-fPIC

	<os>NT:<define>_WINDOWS

	# icu library off
	#<define>BOOST_HAS_ICU=0

	#
	# GCC specific flags
	#
	# removes deprecated header used by boost
	<toolset>gcc:<cxxflags>-Wno-deprecated

	<toolset-gcc:version>$(gcc-no-overflow):<cxxflags>"-ftemplate-depth=256"

	# default build
	#<variant>release

	#
	# MSVC specific flags
	#
	<toolset>msvc:<define>_SCL_SECURE_NO_DEPRECATE
	<toolset>msvc:<define>_CRT_SECURE_NO_DEPRECATE

	<os>LINUX:<define>__LINUX__
    ;

##############################################################################
# libraries
##############################################################################
use-project     /boost      : $(BOOST_LIBS) ;
use-project     /boostHack  : $(BOOST_HACK) ;
use-project     /terry      : $(TERRY) ;

##############################################################################
# Main targets
##############################################################################
#
# TUTTLE LIBRARY & TESTS
#
use-project     /tuttle         : libraries/tuttle ;
use-project     /tuttletests    : libraries/tuttle/tests ;

#
# SAM COMMAND LINE TOOL & TESTS
#
use-project /sam-tools          : applications/sam/ ;
alias       /sam                : /sam-tools ;

#use-project    /pyTuttle       : applications/pyTuttle ;
#use-project    /samtests       : applications/sam-ls/tests ;


#
# TUTTLEOFX PLUGINS
#
use-project     /plugins        : plugins ;

alias           /tests          : /plugins
				  /tuttletests
				  /samtests
				;

#
# SAM INTERFACE IN QT4
#
use-project /qsam               : applications/qSam/ ;

# all targets have to be marked as explicit
explicit        /tuttle
		/tuttletests

		/sam-tools
		/qsam
#               /samtests
		/plugins
		/pyTuttle
		/tests
		;
