#! /usr/bin/env python
'''\
clang description.
Template : v0.1\
'''
import sys

name       = 'clang'
if sys.platform == 'darwin':
    url        = 'http://llvm.org/releases/3.3/clang+llvm-3.3-x86_64-apple-darwin12.tar.gz'
    filename   = 'clang+llvm-3.3-x86_64-apple-darwin12.tar.gz'
    size       = 79233729
    sha1       = '6980f284489b070578096ec6662c930513b7d1e7'
    depends_on = []

else:
    raise NotImplementedError('url, sha and dependencies are not define '
                              'for platform {}.'.format(sys.platform))

## dev env
import os
os.environ['BRNDO_ROOT'] = '/Users/alx/dev/eclipse/workspace/TuttleOFX/3rdParty'
import sys
sys.path.append(os.path.realpath(os.path.join(os.path.dirname(__file__), '../..')))


def materialize(verbose=False, dry_run=False):
    '''
    Materialize the lib (archive, git repository ...)
    Hint: Make integrity check here.
    TODO: Put download function in bernardo.util
    '''
    import os
    from bernardo import util

    real_path = os.path.join(os.environ['BRNDO_ROOT'], 'archive', filename)
    do_download = True
    from_byte = 0
    print real_path

    if is_materialized(verbose):
        do_download = False
        
    else:
        from_byte = util.file_bytes_to_skip(real_path, size, sha1)

    if do_download:
        report_hook = None
        if not verbose:
            report_hook = util.urlretrieve_report_hook(url)
        import urllib
        urllib.urlretrieve(url, filename, report_hook)
        
    if is_materialized(verbose): # TODO: split is materialized in 
        pass                     #util.(fetch_archive|git_clone,check_sha|git_check_commit, extract|None)

    print real_path
    print "materialized"
    #urllib.urlretrieve(lib.url, destination_filename, report_hook)
    #TODO checksum check
    #TODO decompress into install
    # if not util.archive_is_fetched(name, url):
    #     util.fetch_archive(name, url, real_path)

    # if not util.check_sha1(real_path, sha1, verbose=verbose):
    #     raise ValueError('Checksum failed.')

    # if not util.archive_is_uncompressed(real_path):
    #     util.uncompress_archive(real_path)

    print "Copy content to local dir"


def is_materialized(verbose=False):
    '''
    Return True if the lib is correctlky materialized,
    False otherwise.
    '''
    import os
    from bernardo import util

    real_path = os.path.join(os.environ['BRNDO_ROOT'], 'archive', filename)
    if not os.path.exists(real_path):
        return False
    # if not util.is_fetched(url, real_path, size)
    #   return False
    # if not util.check_sha1()

    return True

def install():
    '''
    Install the lib (typically configure, make, make install)
    But since we can have strange birds on the internet, make
    everything necessary here.
    '''
    raise NotImplementedError()

def is_installed():
    '''
    Return True if the lib is installed
    False otherwise.
    '''
    raise NotImplementedError()

def clean():
    '''
    Clean the archive (reverse of the install function)
    '''
    raise NotImplementedError()

def distclean():
    '''
    Disclean the archive (clean + reverse of the materialize function)
    '''
    raise NotImplementedError()

def status():
    '''
    '''
    s = (__doc__  + "\n"
         "(" + sys.platform + ")\n" +
         "    name        = '{}'\n"
         "    url         = '{}'\n"
         "    sha1        = '{}'\n"
         "    depends_on  = {}\n".format(name, url, sha1, depends_on))
    
    return s

if __name__ == "__main__":
    sys.stdout.write(status())
