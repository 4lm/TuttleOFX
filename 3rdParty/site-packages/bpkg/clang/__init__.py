#! /usr/bin/env python
'''\
clang description.
Template : v0.1\
'''
import sys

name       = 'clang'
if sys.platform == 'darwin':
    url        = 'http://llvm.org/releases/3.3/clang+llvm-3.3-x86_64-apple-darwin12.tar.gz'
    filename   = 'clang+llvm-3.3-x86_64-apple-darwin12.tar.gz'
    size       = 79233729
    sha1       = '6980f284489b070578096ec6662c930513b7d1e7'
    depends_on = []

else:
    raise NotImplementedError('url, sha and dependencies are not define '
                              'for platform {}.'.format(sys.platform))

## dev env
import os
os.environ['BRNDO_ROOT'] = '/Users/alx/dev/eclipse/workspace/TuttleOFX/3rdParty'
import sys
sys.path.append(os.path.realpath(os.path.join(os.path.dirname(__file__), '../..')))


def materialize(verbose=False, dry_run=False):
    '''
    Materialize the lib (archive, git repository ...)
    Hint: Make integrity check here.
    TODO: Put download function in bernardo.util
    '''
    import os
    from bernardo import util

    if is_materialized(verbose):
        return True

    if not util.is_fetched(filename, size):
        util.fetch_archive(url, filename, size, verbose=verbose)
        
    if not util.check_sha1(filename, sha1, verbose=verbose):
        raise ValueError('Checksum error.')

    if not util.archive_is_uncompressed(filename, verbose=verbose):
        util.uncompress_archive(filename, verbose=verbose)

    if is_materialized(verbose=verbose): # TODO: split is materialized in 
        pass                     #util.(fetch_archive|git_clone,check_sha|git_check_commit, extract|None)

    print real_path
    print "materialized"

    if not util.check_sha1(util.archive_real_path(filename), sha1,
                           verbose=verbose):
        raise ValueError('Checksum failed.')


    print "Copy content to local dir"


def is_materialized(verbose=False):
    '''
    Return True if the lib is correctly materialized,
    False otherwise.
    '''
    from bernardo import util

    if not util.is_fetched(filename, size, verbose=verbose):
      return False

    if not util.check_sha1(util.archive_real_path(filename), sha1, 
                           verbose=verbose):
        return False

    if not util.archive_is_uncompressed(filename, verbose=verbose):
        return False

    return True

def install(verbose=False):
    '''
    Install the lib (typically configure, make, make install)
    But since we can have strange birds on the internet, make
    everything necessary here.
    '''
    raise NotImplementedError()

def is_installed(verbose=False):
    '''
    Return True if the lib is installed
    False otherwise.
    '''
    raise NotImplementedError()

def clean(verbose=False):
    '''
    Clean the archive (reverse of the install function)
    '''
    raise NotImplementedError()

def distclean(verbose=False):
    '''
    Disclean the archive (clean + reverse of the materialize function)
    '''
    raise NotImplementedError()

def status():
    '''
    '''
    s = (__doc__  + "\n"
         "(" + sys.platform + ")\n" +
         "    name        = '{}'\n"
         "    url         = '{}'\n"
         "    sha1        = '{}'\n"
         "    size        = {}\n"
         "    depends_on  = {}\n".format(name, url, sha1, size, depends_on))
    
    return s

if __name__ == "__main__":
    sys.stdout.write(status())
