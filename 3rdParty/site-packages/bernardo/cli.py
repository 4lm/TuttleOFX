import cmd

import util


class Brndo(cmd.Cmd):

    def __init__(self, all_libs):
        cmd.Cmd.__init__(self)
        self.ruler =' '
        self.all_libs = all_libs
        self.libs_dict = {}
        for l in self.all_libs:
            self.libs_dict[l.name] = l

    def _valid_lib_name_list(self, args):
        '''
        Return a lib name list containing only recognized lib name.
        args is a str list.
        '''
        libs = []
        for name in args:
            if name in self.libs_dict.keys():
                libs.append(self.libs_dict[name])

            else:
                print "*Warning* - target lib '{}' not found.".format(name)

        return libs

    def help_help(self):
        print "Print the help."

    def help_brndo(self):
        pager(__doc__)

    def do_quit(self, arg, print_ln=False):
        '''
        quit
        Exit program
        '''
        import sys

        if print_ln:
            print('')

        sys.exit()

    def do_list(self, arg):
        '''
        list
        Print the lib list.
        '''
        if arg:
            print self.do_list.__doc__
            return

        from pydoc import pager

        all_libs_status = ""
        for l in self.all_libs:
            all_libs_status += "{}\n".format(l.status())

        pager(all_libs_status)            

    def do_materialize(self, arg):
        '''
        materialize [-v] [lib ...]
        Materialize lib.
          -v  Show command output.
        '''
        libs = self.all_libs
        verbose = False
        if arg:
            args = arg.split()
            if '-v' in args:
                verbose = True
                args.remove('-v')

            if args:
                libs = self._valid_lib_name_list(args)

        import util

        libs = util.update_libs_with_dependencies(libs, self.all_libs)
        graph = {}
        for l in libs:
            graph[l.name] = l.depends_on

        ordered_lib_names = util.order_by_topology(graph) 
        print libs, ordered_lib_names
        
        for lib in libs:
            print "-- \nMaterialize ", repr(lib.name)                
            try:
                if not lib.is_materialized(verbose=verbose):
                    lib.materialize(verbose=verbose)

                print "Ok - Materialized."

            except Exception as e:
                import traceback

                print traceback.format_exc(e)
                print "**ERROR** - Materialize failed !"

    def do_install(self, arg):
        '''
        install [-v] [lib ...]
        Install lib.
          -v  Show command output.
        '''
        libs = self.all_libs
        verbose = False
        if arg:
            args = arg.split()
            if '-v' in args:
                verbose = True
                args.remove('-v')

            if args:
                libs = self._valid_lib_name_list(args)

        for lib in libs:
            if verbose:
                self.onecmd(" ".join(['materialize -v', lib.name]))

            else:
                self.onecmd(" ".join(['materialize', lib.name]))

            print "-- \nInstall ", repr(lib.name)
            if not getattr(lib, 'install'):
                print "*Warning* - Install command not specified. (Skipping)"
                continue

            try:
                lib.install(verbose=verbose)
                print "Ok - Installed."

            except Exception as e:
                import traceback

                print traceback.format_exc(e)
                print "**ERROR** - Install failed !"

    def do_clean(self, arg):
        '''
        clean [-v] [lib ...]
        Clean lib build dir.
          -v  Show command output.
        '''
        libs = self.all_libs
        verbose_output = False
        if arg:
            args = arg.split()
            if '-v' in args:
                verbose_output = True
                args.remove('-v')

            if args:
                libs = self._valid_lib_name_list(args)

        for lib in libs:
            print "-- \nClean ", repr(lib.name)
            if not getattr(lib, 'clean'):
                print "*Warning* - Clean command not specified. (Skipping)"
                continue

            try:
                lib.distclean(verbose=verbose_output)
                print "Ok - Cleaned."

            except Exception as e:
                import traceback

                print traceback.format_exc(e)
                print "**ERROR** - Clean failed !"


    def do_distclean(self, arg):
        '''
        distclean [-v] [lib ...]
        Delete all files (archive, build directory)
          -v  Show command output.
        '''
        libs = self.all_libs
        verbose_output = False
        if arg:
            args = arg.split()
            if '-v' in args:
                verbose_output = True
                args.remove('-v')

            if args:
                libs = self._valid_lib_name_list(args)

        for lib in libs:
            print "-- \nDist clean ", repr(lib.name)
            if not getattr(lib, 'distclean'):
                print "*Warning* - Dist clean command not specified. (Skipping)"
                continue

            try:
                lib.distclean(verbose=verbose_output)
                print "Ok - Dist cleaned."

            except Exception as e:
                import traceback

                print traceback.format_exc(e)
                print "**ERROR** - Dist clean failed !"

    # shortcuts
    do_q        = do_quit
    do_EOF      = lambda self, arg: Brndo.do_quit(self, arg, print_ln=True)
    do_EOF.__doc__ = do_quit.__doc__
