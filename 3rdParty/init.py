#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
import sys
import urllib
import subprocess

global current_file # global variable used in dlProgress function
current_file = ''

def dlProgress(count, blockSize, totalSize):
	pcent = int( count * blockSize * 100/totalSize )
	sys.stdout.write( '\r' + current_file + '%d%% '% pcent)
	sys.stdout.flush()

global knowExtensions
knowExtensions = { 'tar': 'tar xf',
                   'tar.gz': 'tar xfz',
                   'tgz': 'tar xfz',
                   'tar.bz2': 'tar xfj',
                   'zip': 'unzip' }
                   
def getKnowExtensions( filename ):
	global knowExtensions
	return [f for f in knowExtensions.keys() if filename.endswith(f)]

def uncompress(filename, ext, inNewDirectory):
	global knowExtensions
	binOptions = { 'tar' : {'directory':'--directory',},
	               'unzip' : {'directory':'-d',},
	             }
	cmdFromExtension = knowExtensions[ext]
	cmd = cmdFromExtension.split()
	bin = cmd[0]
	if( inNewDirectory ):
		cmd.append( binOptions[bin]['directory'] )
		cmd.append( filename[:-len(ext)-1] )
	cmd.append(filename)
	print '\n', ' '.join(cmd)
	p = subprocess.Popen(cmd).communicate()

def getAndUncompress( libraries ):
	
	for libname, url, inNewDirectory in libraries:
		print '_'*80
		print '--', libname
		parts = url.split('/')
		filename = [p for p in parts if len(getKnowExtensions(p))]
		if len(filename) == 0:
			print '-'*40
			print 'No filename with a regognize extension in "'+libname+'" url="'+url+'"'
			print '-'*40
			continue
		filename = filename[0]
		print url, ' -> ', filename
		ext = getKnowExtensions(filename)[0]
		current_file = filename
		try:
			if os.path.isfile(filename): # if not already downloaded
				print 'Already downloaded: ', filename
			else:
				urllib.urlretrieve(url, filename, dlProgress)
			dirname = filename[:-len(ext)-1]
			if os.path.isdir(libname) or os.path.islink(libname): # if not already uncompressed
				print 'Already uncompressed : ', dirname
			else:
				uncompress( filename, ext, inNewDirectory )
				if not os.path.isdir(dirname):
					dirs = [f for f in os.listdir('.') if os.path.isdir(f)]
					for d in dirs:
						if dirname in d or d in dirname:
							dirname = d
							break;
					else:
						raise RuntimeError('Directory extracted from archive "'+filename+'" not found.')
				print 'link ', dirname, ' <- ', libname
				if os.name == "posix": # unix
					try:
						os.symlink(dirname, libname)
					except Exception, e:
						print 'cannot create link (', str(e), '), so rename the directory.'
						os.rename(dirname, libname)
				elif os.name in ['nt', 'dos', 'ce']: # windows
					os.rename(dirname, libname)
		except Exception, e:
			print 'uncompress error (', str(e), ')'


getAndUncompress(
	[ ('zlib','http://prdownloads.sourceforge.net/libpng/zlib-1.2.3.tar.gz', False),
	  ('png', 'http://prdownloads.sourceforge.net/libpng/libpng-1.2.41.tar.gz', False),
	  ('ilmbase', 'http://download.savannah.nongnu.org/releases/openexr/ilmbase-1.0.1.tar.gz', True),
	  ('openexr', 'http://download.savannah.nongnu.org/releases/openexr/openexr-1.6.1.tar.gz', True),
	  ('boost', 'http://prdownloads.sourceforge.net/boost/boost_1_43_0.tar.bz2', False),
	  #('artoolkitplus', 'http://fabien.castan.free.fr/rom/ARToolKitPlus_2.1.1_linux-fixed.tar.bz2', False),
	  #('sba', 'http://www.ics.forth.gr/~lourakis/sba/sba-1.6.tgz', False),
	  #('opencv', 'http://sourceforge.net/projects/opencvlibrary/files/opencv-unix/2.1/OpenCV-2.1.0.tar.bz2/download', False),
	  #('cminpack','http://devernay.free.fr/hacks/cminpack-1.0.3.tar.gz', False),
	  #('gsl', 'ftp://mirror.cict.fr/gnu/gsl/gsl-1.14.tar.gz', False),
	  #('cuda','http://developer.download.nvidia.com/compute/cuda/3_0/toolkit/cudatoolkit_3.0_linux_32_ubuntu9.04.run', False),
	]
	)

#subprocess.Popen( ['patch', 'boost/libs/test/build/Jamfile.v2', 'boost_unit_testing_framework.patch'] )

#echo ">>> BUILDING Boost JAM"
#CURRENT_DIR=`pwd`
#cd $CURRENT_DIR/boost
#source `pwd`/bootstrap.sh
#cd $CURRENT_DIR
#
#echo ">>> PREPARING bjam.sh script"
#BJAM=../bjam.sh
#rm -f $BJAM
#echo "#!/bin/bash">>$BJAM
#echo "# This script is autogenerated from 3rdParty/init.sh">>$BJAM
#echo "export BOOST_BUILD_PATH=`pwd`/boost/tools/build/v2">>$BJAM
#echo "`pwd`/boost/bjam \$*">>$BJAM
#chmod u+x $BJAM

