### TuttleOFX compilation with bjam tool ###

###############
# IN PROGRESS #
###############

# We call $TUTTLEOFX the TuttleOFX root directory.
export TUTTLEOFX=`pwd`


### Fetching external libraries ###

cd $TUTTLEOFX/3rdParty
# now download the libraries
python init.py

# create the command builder bjam.sh or bjam.bat
python makeBjamCommand.py

# configure 3rdParty libraries: freetype, libcaca, jpeg and openjpeg libraries
python configure.py


## Building the building tool : bjam

# BJam is Boost library's build tool. TuttleOFX uses it also as a project builder.
# In order to build bjam and boost libraries:
cd $TUTTLEOFX/3rdParty/boost
# * under linux platform:
./bootstrap.sh

# * under windows platform:
# .\bootstrap.bat

## Setting up environment variables
# In order to use bjam, two environment variables have to be set:
#  - PATH				: to locate bjam executable
export PATH=$TUTTLEOFX/3rdParty/boost:$PATH
#  - BOOST_BUILD_PATH	: to locate boost.build scripts
export BOOST_BUILD_PATH=$TUTTLEOFX/3rdParty/boost/tools/build/v2

cd $TUTTLEOFX
cp tools/bjamf/user-config.linux.jam user-config.jam

## Building TuttleOFX
# In order to build TuttleOFX library (tuttle) and command line tool (sam), you can:
./bjam.sh /sam-tools /plugins
# OR
# cd $TUTTLEOFX/...subproject...
# b2


## Usefull bjam command line options and properties ###

# ./bjam.sh --help         Display help message with properties for TuttleOFX projet

# --help                   Display help message
# --clean                  Remove targets instead of building
# -a                       Build all targets, even if they are current
# --toolset=toolset        Indicates the toolset to build with [gcc|mingw|msvc|...]
# variant=debug|release	   Select the build variant
# link=static|shared       Whether to build static or shared libraries

